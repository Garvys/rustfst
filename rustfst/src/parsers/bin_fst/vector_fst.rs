use std::fs::read;
use std::fs::File;
use std::io::BufWriter;
use std::path::Path;

use failure::{Fallible, ResultExt};
use nom::multi::count;
use nom::number::complete::{le_f32, le_i64};
use nom::IResult;

use crate::fst_impls::vector_fst::VectorFstState;
use crate::fst_impls::VectorFst;
use crate::fst_traits::{ArcIterator, BinaryDeserializer, BinarySerializer, CoreFst, ExpandedFst};
use crate::parsers::bin_fst::fst_header::{FstHeader, OpenFstString, FST_MAGIC_NUMBER};
use crate::parsers::bin_fst::utils_parsing::{
    parse_final_weight, parse_fst_arc, parse_start_state,
};
use crate::parsers::bin_fst::utils_serialization::{write_bin_f32, write_bin_i32, write_bin_i64};
use crate::semirings::Semiring;
use crate::EPS_LABEL;

static VECTOR_MIN_FILE_VERSION: i32 = 2;

#[derive(Debug, PartialEq)]
struct Transition {
    ilabel: i32,
    olabel: i32,
    weight: f32,
    nextstate: i32,
}

fn parse_fst_state<W: Semiring<Type = f32>>(i: &[u8]) -> IResult<&[u8], VectorFstState<W>> {
    let (i, final_weight) = le_f32(i)?;
    let (i, num_arcs) = le_i64(i)?;
    let (i, arcs) = count(parse_fst_arc, num_arcs as usize)(i)?;
    Ok((
        i,
        VectorFstState {
            final_weight: parse_final_weight(final_weight),
            arcs,
        },
    ))
}

fn parse_fst<W: Semiring<Type = f32>>(i: &[u8]) -> IResult<&[u8], VectorFst<W>> {
    let (i, header) = FstHeader::parse(i, VECTOR_MIN_FILE_VERSION)?;
    let (i, states) = count(parse_fst_state, header.num_states as usize)(i)?;
    Ok((
        i,
        VectorFst {
            start_state: parse_start_state(header.start),
            states,
        },
    ))
}

impl<W: Semiring<Type = f32> + 'static> BinaryDeserializer for VectorFst<W> {
    fn read<P: AsRef<Path>>(path_bin_fst: P) -> Fallible<Self> {
        let data = read(path_bin_fst.as_ref()).with_context(|_| {
            format!(
                "Can't open VectorFst binary file : {:?}",
                path_bin_fst.as_ref()
            )
        })?;

        let (_, parsed_fst) =
            parse_fst(&data).map_err(|_| format_err!("Error while parsing binary VectorFst"))?;

        Ok(parsed_fst)
    }
}

impl<W: 'static + Semiring<Type = f32>> BinarySerializer for VectorFst<W> {
    fn write<P: AsRef<Path>>(&self, path_bin_fst: P) -> Fallible<()> {
        let mut file = BufWriter::new(File::create(path_bin_fst)?);

        let num_arcs: usize = (0..self.num_states())
            .map(|s: usize| unsafe { self.num_arcs_unchecked(s) })
            .sum();

        let hdr = FstHeader {
            magic_number: FST_MAGIC_NUMBER,
            fst_type: OpenFstString::new("vector"),
            // TODO: This should be generated by the weight type
            arc_type: OpenFstString::new("standard"),
            version: 2i32,
            // TODO: Flags are used to check whether or not a symboltable has to be loaded
            flags: 0i32,
            // TODO: Once the properties are stored, need to read them
            properties: 3u64,
            start: self.start_state.map(|v| v as i64).unwrap_or(-1),
            num_states: self.num_states() as i64,
            num_arcs: num_arcs as i64,
        };
        hdr.write(&mut file)?;

        let zero = W::zero();
        // FstBody
        for state in 0..self.num_states() {
            let f_weight = unsafe {
                self.final_weight_unchecked(state)
                    .unwrap_or_else(|| &zero)
                    .value()
            };
            write_bin_f32(&mut file, *f_weight)?;
            write_bin_i64(&mut file, unsafe { self.num_arcs_unchecked(state) } as i64)?;

            for arc in unsafe { self.arcs_iter_unchecked(state) } {
                write_bin_i32(&mut file, arc.ilabel as i32)?;
                write_bin_i32(&mut file, arc.olabel as i32)?;
                let weight = arc.weight.value();
                write_bin_f32(&mut file, *weight)?;
                write_bin_i32(&mut file, arc.nextstate as i32)?;
            }
        }

        Ok(())
    }
}
